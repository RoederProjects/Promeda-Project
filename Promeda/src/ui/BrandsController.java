package ui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.List;
import java.util.Vector;

import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import org.apache.commons.configuration.Configuration;
import org.apache.commons.configuration.ConfigurationException;
import org.apache.commons.configuration.PropertiesConfiguration;
import org.apache.commons.dbutils.DbUtils;
import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.ResultSetHandler;
import org.apache.commons.dbutils.handlers.BeanListHandler;
import org.apache.commons.io.FilenameUtils;

import com.jcraft.jsch.SftpException;

import model.prototype.Brand;
import model.prototype.StoreDataModel;
import model.singleton.PropertiesModel;
import model.singleton.SFTPClientModel;

public class BrandsController implements ActionListener, ListSelectionListener {

	private BrandsView view;
	private Vector<StoreDataModel> stores;
	private Vector<StoreDataModel> selectedStores;
	private PropertiesModel propApp;

	public BrandsController() {
		initView();
		initStores();
		view.listStores.setListData(stores);
		view.listStores.setSelectedIndex(0);
	}

	public void initView() {
		view = new BrandsView(this);
		view.setVisible(true);
	}

	public void initStores() {
		stores = new Vector<StoreDataModel>();
		propApp = new PropertiesModel();
		propApp.loadAppProperties();
		File f = new File(propApp.get("locNetworkRes") + "stores");
		File[] files = f.listFiles();
		String configPrefix = "brand.logo";
		try {
			for (File file : files) {
				if (!file.isDirectory() && FilenameUtils.isExtension(file.getName(), "properties")) {
					Configuration configStore = new PropertiesConfiguration(file);

					stores.add(new StoreDataModel(configStore.getString("url"), configStore.getString("ftp.host"),
							Integer.parseInt(configStore.getString("ftp.port")), configStore.getString("ftp.protocol"),
							configStore.getString("ftp.user"), configStore.getString("ftp.pswd"),
							configStore.getString("ftp.dir.default"),
							configStore.getBoolean(configPrefix + ".compression.enabled"),
							configStore.getString(configPrefix + ".compression.command"),
							configStore.getList(configPrefix + ".size")));
				}
			}
		} catch (ConfigurationException cex) {
			// Something went wrong
		}
	}

	
	public void initBrands() throws SQLException {

//		ResultSetHandler<Object[]> h = new ResultSetHandler<Object[]>() {
//			public Object[] handle(ResultSet rs) throws SQLException {
//				if (!rs.next()) {
//					return null;
//				}
//
//				ResultSetMetaData meta = rs.getMetaData();
//				int cols = meta.getColumnCount();
//				Object[] result = new Object[cols];
//
//				for (int i = 0; i < cols; i++) {
//					result[i] = rs.getObject(i + 1);
//				}
//
//				return result;
//			}
//		};
		Connection conn = null;
		try {
			// No DataSource so we must handle Connections manually
			QueryRunner run = new QueryRunner();

			List<Brand> brands;

			conn = createConnection();

//			Object[] result = run.query(conn, "SELECT name FROM mail_address", h);
//			view.listBrands.setListData(result);

			// Use the BeanListHandler implementation to convert all
			// ResultSet rows into a List of Person JavaBeans.
			ResultSetHandler<List<Brand>> rshandler = new BeanListHandler<Brand>(Brand.class);

			ResultSetHandler<Brand[]> handler = new ResultSetHandler<Brand[]>() {
				public Brand[] handle(ResultSet rs) throws SQLException {
					if (!rs.next()) {
						return null;
					}
					ResultSetMetaData meta = rs.getMetaData();
					int cols = meta.getColumnCount();
					Brand[] result = new Brand[cols];

					for (int i = 0; i < cols; i++) {
						result[i] = new Brand((String) rs.getObject(i + 1));
					}
					return result;
				}
			};

			// Execute the SQL statement and return the results in a List of
			// Person objects generated by the BeanListHandler.

			brands = run.query(conn, "SELECT brands_name AS name FROM pro_brands", rshandler);
			DefaultListModel listModel = new DefaultListModel();
			for (int i = 0; i < brands.size(); i++) {
				listModel.addElement(brands.get(i));
				System.out.println(brands.get(i).getBrandName());
			}
			view.listBrands.setModel(listModel);

			//view.listBrands.setListData(run.query(conn, "SELECT name FROM mail_address", handler));
			
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			// Use this helper method so we don't have to check for null
			DbUtils.close(conn);
		}
	}

	/**
	 * Creates db.connection
	 *
	 * @throws SQLException           Wenn keine Verbindung zu einer Datenbank
	 *                                hergestellt werden konnte.
	 * @throws ClassNotFoundException Wenn der Datenbanktreiber nicht gefunden
	 *                                werden konnte.
	 */
	private Connection createConnection() throws SQLException, ClassNotFoundException {
		Class.forName("com.mysql.jdbc.Driver");
		//return DriverManager.getConnection("jdbc:sqlserver://WS-EC-33-033:1433;integratedSecurity=true;");
		return DriverManager.getConnection("jdbc:mysql://9153.whserv.de:3306/web2_db2","web2_2","4102=vSQL9");
		//return DriverManager.getConnection("jdbc:mysql://xd1.serverdomain.org:3306/xd122_db9", "xd122_9",
		//		"Rosebud123!");
		// jdbc:mysql://9153.whserv.de:3306/web2_db2","web2_2","17-Nutoffel!
		// here sonoo is database name, root is username and password
	}

	public Vector<File> scanRemoteFiles(StoreDataModel store) {
		SFTPClientModel sftp = new SFTPClientModel(store.getStoreFtpServer(), store.getStoreFtpPort(),
				store.getStoreFtpUser(), store.getStoreFtpPass(), store.getDirDefault());
		sftp.connect();
		if (!sftp.session.isConnected()) {
			sftp.connect();
		}
		try {
			return (Vector<File>) sftp.channelSftp.ls("logos");
		} catch (SftpException e) {
			e.printStackTrace();
			return null;
		}
	}
	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void valueChanged(ListSelectionEvent e) {
		try {
			initBrands();
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
	}

}
